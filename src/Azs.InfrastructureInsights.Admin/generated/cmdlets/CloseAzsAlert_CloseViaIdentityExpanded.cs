// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.4.5, generator: @autorest/powershell@3.0.438)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Cmdlets
{
    using static Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Runtime.Extensions;

    /// <summary>Closes the given alert.</summary>
    /// <remarks>
    /// [OpenAPI] Close=>PUT:"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.InfrastructureInsights.Admin/regionHealths/{location}/alerts/{alertName}"
    /// </remarks>
    [global::Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.InternalExport]
    [global::System.Management.Automation.Cmdlet(global::System.Management.Automation.VerbsCommon.Close, @"AzsAlert_CloseViaIdentityExpanded", SupportsShouldProcess = true)]
    [global::System.Management.Automation.OutputType(typeof(Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Models.Api20160501.IAlert))]
    [global::Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Description(@"Closes the given alert.")]
    [global::Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Generated]
    public partial class CloseAzsAlert_CloseViaIdentityExpanded : global::System.Management.Automation.PSCmdlet,
        Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Runtime.IEventListener
    {
        /// <summary>A unique id generatd for the this cmdlet when it is instantiated.</summary>
        private string __correlationId = System.Guid.NewGuid().ToString();

        /// <summary>A copy of the Invocation Info (necessary to allow asJob to clone this cmdlet)</summary>
        private global::System.Management.Automation.InvocationInfo __invocationInfo;

        /// <summary>A unique id generatd for the this cmdlet when ProcessRecord() is called.</summary>
        private string __processRecordId;

        /// <summary>
        /// The <see cref="global::System.Threading.CancellationTokenSource" /> for this operation.
        /// </summary>
        private global::System.Threading.CancellationTokenSource _cancellationTokenSource = new global::System.Threading.CancellationTokenSource();

        /// <summary>Backing field for <see cref="AlertBody" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Models.Api20160501.IAlert _alertBody= new Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Models.Api20160501.Alert();

        /// <summary>This object represents an alert resource.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Models.Api20160501.IAlert AlertBody { get => this._alertBody; set => this._alertBody = value; }

        /// <summary>Gets or sets the ID of the alert.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Gets or sets the ID of the alert.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Category(global::Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Gets or sets the ID of the alert.",
        SerializedName = @"alertId",
        PossibleTypes = new [] { typeof(string) })]
        public string AlertId { get => AlertBody.AlertId ?? null; set => AlertBody.AlertId = value; }

        /// <summary>Properties of the alert.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.ExportAs(typeof(global::System.Collections.Hashtable))]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Properties of the alert.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Category(global::Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Properties of the alert.",
        SerializedName = @"alertProperties",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Models.Api20160501.IAlertModelAlertProperties) })]
        public Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Models.Api20160501.IAlertModelAlertProperties AlertProperty { get => AlertBody.AlertProperty ?? null /* object */; set => AlertBody.AlertProperty = value; }

        /// <summary>Wait for .NET debugger to attach</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Wait for .NET debugger to attach")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Category(global::Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.ParameterCategory.Runtime)]
        public global::System.Management.Automation.SwitchParameter Break { get; set; }

        /// <summary>The reference to the client API class.</summary>
        public Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.InfrastructureInsightsManagementClient Client => Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Module.Instance.ClientAPI;

        /// <summary>User alias who closed the alert.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "User alias who closed the alert.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Category(global::Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"User alias who closed the alert.",
        SerializedName = @"closedByUserAlias",
        PossibleTypes = new [] { typeof(string) })]
        public string ClosedByUserAlias { get => AlertBody.ClosedByUserAlias ?? null; set => AlertBody.ClosedByUserAlias = value; }

        /// <summary>Timestamp when the alert was closed.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Timestamp when the alert was closed.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Category(global::Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Timestamp when the alert was closed.",
        SerializedName = @"closedTimestamp",
        PossibleTypes = new [] { typeof(string) })]
        public string ClosedTimestamp { get => AlertBody.ClosedTimestamp ?? null; set => AlertBody.ClosedTimestamp = value; }

        /// <summary>Timestamp when the alert was created.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Timestamp when the alert was created.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Category(global::Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Timestamp when the alert was created.",
        SerializedName = @"createdTimestamp",
        PossibleTypes = new [] { typeof(string) })]
        public string CreatedTimestamp { get => AlertBody.CreatedTimestamp ?? null; set => AlertBody.CreatedTimestamp = value; }

        /// <summary>
        /// The credentials, account, tenant, and subscription used for communication with Azure
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The credentials, account, tenant, and subscription used for communication with Azure.")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::System.Management.Automation.Alias("AzureRMContext", "AzureCredential")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Category(global::Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.ParameterCategory.Azure)]
        public global::System.Management.Automation.PSObject DefaultProfile { get; set; }

        /// <summary>Description of the alert.</summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Description of the alert.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Category(global::Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Description of the alert.",
        SerializedName = @"description",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Models.Api20160501.IDictionary) })]
        public Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Models.Api20160501.IDictionary[] Description { get => AlertBody.Description ?? null /* arrayOf */; set => AlertBody.Description = value; }

        /// <summary>Gets or sets the fault ID of the alert.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Gets or sets the fault ID of the alert.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Category(global::Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Gets or sets the fault ID of the alert.",
        SerializedName = @"faultId",
        PossibleTypes = new [] { typeof(string) })]
        public string FaultId { get => AlertBody.FaultId ?? null; set => AlertBody.FaultId = value; }

        /// <summary>Gets or sets the fault type ID of the alert.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Gets or sets the fault type ID of the alert.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Category(global::Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Gets or sets the fault type ID of the alert.",
        SerializedName = @"faultTypeId",
        PossibleTypes = new [] { typeof(string) })]
        public string FaultTypeId { get => AlertBody.FaultTypeId ?? null; set => AlertBody.FaultTypeId = value; }

        /// <summary>Indicates if the alert can be remediated.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Indicates if the alert can be remediated.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Category(global::Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Indicates if the alert can be remediated.",
        SerializedName = @"hasValidRemediationAction",
        PossibleTypes = new [] { typeof(global::System.Management.Automation.SwitchParameter) })]
        public global::System.Management.Automation.SwitchParameter HasValidRemediationAction { get => AlertBody.HasValidRemediationAction ?? default(global::System.Management.Automation.SwitchParameter); set => AlertBody.HasValidRemediationAction = value; }

        /// <summary>SendAsync Pipeline Steps to be appended to the front of the pipeline</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "SendAsync Pipeline Steps to be appended to the front of the pipeline")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Category(global::Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.ParameterCategory.Runtime)]
        public Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Runtime.SendAsyncStep[] HttpPipelineAppend { get; set; }

        /// <summary>SendAsync Pipeline Steps to be prepended to the front of the pipeline</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "SendAsync Pipeline Steps to be prepended to the front of the pipeline")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Category(global::Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.ParameterCategory.Runtime)]
        public Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Runtime.SendAsyncStep[] HttpPipelinePrepend { get; set; }

        /// <summary>Display name for the impacted item.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Display name for the impacted item.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Category(global::Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Display name for the impacted item.",
        SerializedName = @"impactedResourceDisplayName",
        PossibleTypes = new [] { typeof(string) })]
        public string ImpactedResourceDisplayName { get => AlertBody.ImpactedResourceDisplayName ?? null; set => AlertBody.ImpactedResourceDisplayName = value; }

        /// <summary>Gets or sets the Resource ID for the impacted item.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Gets or sets the Resource ID for the impacted item.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Category(global::Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Gets or sets the Resource ID for the impacted item.",
        SerializedName = @"impactedResourceId",
        PossibleTypes = new [] { typeof(string) })]
        public string ImpactedResourceId { get => AlertBody.ImpactedResourceId ?? null; set => AlertBody.ImpactedResourceId = value; }

        /// <summary>Backing field for <see cref="InputObject" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Models.IInfrastructureInsightsAdminIdentity _inputObject;

        /// <summary>Identity Parameter</summary>
        [global::System.Management.Automation.Parameter(Mandatory = true, HelpMessage = "Identity Parameter", ValueFromPipeline = true)]
        [global::Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Category(global::Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.ParameterCategory.Path)]
        public Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Models.IInfrastructureInsightsAdminIdentity InputObject { get => this._inputObject; set => this._inputObject = value; }

        /// <summary>Accessor for our copy of the InvocationInfo.</summary>
        public global::System.Management.Automation.InvocationInfo InvocationInformation { get => __invocationInfo = __invocationInfo ?? this.MyInvocation ; set { __invocationInfo = value; } }

        /// <summary>Timestamp when the alert was last updated.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Timestamp when the alert was last updated.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Category(global::Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Timestamp when the alert was last updated.",
        SerializedName = @"lastUpdatedTimestamp",
        PossibleTypes = new [] { typeof(string) })]
        public string LastUpdatedTimestamp { get => AlertBody.LastUpdatedTimestamp ?? null; set => AlertBody.LastUpdatedTimestamp = value; }

        /// <summary>The Azure Region where the resource lives</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The Azure Region where the resource lives")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Category(global::Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The Azure Region where the resource lives",
        SerializedName = @"location",
        PossibleTypes = new [] { typeof(string) })]
        [Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Runtime.DefaultInfo(
        Name = @"",
        Description =@"",
        Script = @"(Get-AzLocation)[0].Location")]
        public string Location { get => AlertBody.Location ?? null; set => AlertBody.Location = value; }

        /// <summary>
        /// <see cref="IEventListener" /> cancellation delegate. Stops the cmdlet when called.
        /// </summary>
        global::System.Action Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Runtime.IEventListener.Cancel => _cancellationTokenSource.Cancel;

        /// <summary><see cref="IEventListener" /> cancellation token.</summary>
        global::System.Threading.CancellationToken Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Runtime.IEventListener.Token => _cancellationTokenSource.Token;

        /// <summary>
        /// The instance of the <see cref="Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Runtime.HttpPipeline" /> that the remote call will use.
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Runtime.HttpPipeline Pipeline { get; set; }

        /// <summary>The URI for the proxy server to use</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "The URI for the proxy server to use")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Category(global::Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.ParameterCategory.Runtime)]
        public global::System.Uri Proxy { get; set; }

        /// <summary>Credentials for a proxy server to use for the remote call</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Credentials for a proxy server to use for the remote call")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Category(global::Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.ParameterCategory.Runtime)]
        public global::System.Management.Automation.PSCredential ProxyCredential { get; set; }

        /// <summary>Use the default credentials for the proxy</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Use the default credentials for the proxy")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Category(global::Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.ParameterCategory.Runtime)]
        public global::System.Management.Automation.SwitchParameter ProxyUseDefaultCredentials { get; set; }

        /// <summary>Gets or sets the admin friendly remediation instructions for the alert.</summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Gets or sets the admin friendly remediation instructions for the alert.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Category(global::Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Gets or sets the admin friendly remediation instructions for the alert.",
        SerializedName = @"remediation",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Models.Api20160501.IDictionary) })]
        public Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Models.Api20160501.IDictionary[] Remediation { get => AlertBody.Remediation ?? null /* arrayOf */; set => AlertBody.Remediation = value; }

        /// <summary>Gets or sets the registration ID of the service the alert belongs to.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Gets or sets the registration ID of the service the alert belongs to.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Category(global::Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Gets or sets the registration ID of the service the alert belongs to.",
        SerializedName = @"resourceProviderRegistrationId",
        PossibleTypes = new [] { typeof(string) })]
        public string ResourceProviderRegistrationId { get => AlertBody.ResourceProviderRegistrationId ?? null; set => AlertBody.ResourceProviderRegistrationId = value; }

        /// <summary>
        /// Gets or sets the registration ID of the resource associated with the alert. If the alert is not associated with a resource,
        /// the resource registration ID is null.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Gets or sets the registration ID of the resource associated with the alert. If the alert is not associated with a resource, the resource registration ID is null.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Category(global::Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Gets or sets the registration ID of the resource associated with the alert. If the alert is not associated with a resource, the resource registration ID is null.",
        SerializedName = @"resourceRegistrationId",
        PossibleTypes = new [] { typeof(string) })]
        public string ResourceRegistrationId { get => AlertBody.ResourceRegistrationId ?? null; set => AlertBody.ResourceRegistrationId = value; }

        /// <summary>Severity of the alert.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Severity of the alert.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Category(global::Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Severity of the alert.",
        SerializedName = @"severity",
        PossibleTypes = new [] { typeof(string) })]
        public string Severity { get => AlertBody.Severity ?? null; set => AlertBody.Severity = value; }

        /// <summary>State of the alert.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "State of the alert.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Category(global::Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"State of the alert.",
        SerializedName = @"state",
        PossibleTypes = new [] { typeof(string) })]
        public string State { get => AlertBody.State ?? null; set => AlertBody.State = value; }

        /// <summary>Resource tags.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.ExportAs(typeof(global::System.Collections.Hashtable))]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Resource tags.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Category(global::Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Resource tags.",
        SerializedName = @"tags",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Models.Api20160501.ITrackedResourceTags) })]
        public Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Models.Api20160501.ITrackedResourceTags Tag { get => AlertBody.Tag ?? null /* object */; set => AlertBody.Tag = value; }

        /// <summary>Gets or sets the Resource ID for the impacted item.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Gets or sets the Resource ID for the impacted item.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Category(global::Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Gets or sets the Resource ID for the impacted item.",
        SerializedName = @"title",
        PossibleTypes = new [] { typeof(string) })]
        public string Title { get => AlertBody.Title ?? null; set => AlertBody.Title = value; }

        /// <summary>Backing field for <see cref="User" /> property.</summary>
        private string _user;

        /// <summary>The username used to perform the operation.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = true, HelpMessage = "The username used to perform the operation.")]
        [Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The username used to perform the operation.",
        SerializedName = @"user",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Category(global::Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.ParameterCategory.Query)]
        public string User { get => this._user; set => this._user = value; }

        /// <summary>
        /// <c>overrideOnOk</c> will be called before the regular onOk has been processed, allowing customization of what happens
        /// on that response. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Models.Api20160501.IAlert"
        /// /> from the remote call</param>
        /// <param name="returnNow">/// Determines if the rest of the onOk method should be processed, or if the method should return
        /// immediately (set to true to skip further processing )</param>

        partial void overrideOnOk(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Models.Api20160501.IAlert> response, ref global::System.Threading.Tasks.Task<bool> returnNow);

        /// <summary>
        /// (overrides the default BeginProcessing method in global::System.Management.Automation.PSCmdlet)
        /// </summary>
        protected override void BeginProcessing()
        {
            Module.Instance.SetProxyConfiguration(Proxy, ProxyCredential, ProxyUseDefaultCredentials);
            if (Break)
            {
                Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Runtime.AttachDebugger.Break();
            }
            ((Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Runtime.Events.CmdletBeginProcessing).Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
        }

        /// <summary>
        /// Intializes a new instance of the <see cref="CloseAzsAlert_CloseViaIdentityExpanded" /> cmdlet class.
        /// </summary>
        public CloseAzsAlert_CloseViaIdentityExpanded()
        {

        }

        /// <summary>Performs clean-up after the command execution</summary>
        protected override void EndProcessing()
        {
            ((Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Runtime.Events.CmdletEndProcessing).Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
        }

        /// <summary>Handles/Dispatches events during the call to the REST service.</summary>
        /// <param name="id">The message id</param>
        /// <param name="token">The message cancellation token. When this call is cancelled, this should be <c>true</c></param>
        /// <param name="messageData">Detailed message data for the message event.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the message is completed.
        /// </returns>
         async global::System.Threading.Tasks.Task Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Runtime.IEventListener.Signal(string id, global::System.Threading.CancellationToken token, global::System.Func<Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Runtime.EventData> messageData)
        {
            using( NoSynchronizationContext )
            {
                if (token.IsCancellationRequested)
                {
                    return ;
                }

                switch ( id )
                {
                    case Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Runtime.Events.Verbose:
                    {
                        WriteVerbose($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Runtime.Events.Warning:
                    {
                        WriteWarning($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Runtime.Events.Information:
                    {
                        var data = messageData();
                        WriteInformation(data.Message, new string[]{});
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Runtime.Events.Debug:
                    {
                        WriteDebug($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Runtime.Events.Error:
                    {
                        WriteError(new global::System.Management.Automation.ErrorRecord( new global::System.Exception(messageData().Message), string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null ) );
                        return ;
                    }
                }
                await Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Module.Instance.Signal(id, token, messageData, (i,t,m) => ((Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Runtime.IEventListener)this).Signal(i,t,()=> Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Runtime.EventDataConverter.ConvertFrom( m() ) as Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Runtime.EventData ), InvocationInformation, this.ParameterSetName, __correlationId, __processRecordId, null );
                if (token.IsCancellationRequested)
                {
                    return ;
                }
                WriteDebug($"{id}: {(messageData().Message ?? global::System.String.Empty)}");
            }
        }

        /// <summary>Performs execution of the command.</summary>
        protected override void ProcessRecord()
        {
            ((Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Runtime.Events.CmdletProcessRecordStart).Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
            __processRecordId = System.Guid.NewGuid().ToString();
            try
            {
                // work
                if (ShouldProcess($"Call remote 'AlertsClose' operation"))
                {
                    using( var asyncCommandRuntime = new Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Runtime.PowerShell.AsyncCommandRuntime(this, ((Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Runtime.IEventListener)this).Token) )
                    {
                        asyncCommandRuntime.Wait( ProcessRecordAsync(),((Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Runtime.IEventListener)this).Token);
                    }
                }
            }
            catch (global::System.AggregateException aggregateException)
            {
                // unroll the inner exceptions to get the root cause
                foreach( var innerException in aggregateException.Flatten().InnerExceptions )
                {
                    ((Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Runtime.Events.CmdletException, $"{innerException.GetType().Name} - {innerException.Message} : {innerException.StackTrace}").Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                    // Write exception out to error channel.
                    WriteError( new global::System.Management.Automation.ErrorRecord(innerException,string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null) );
                }
            }
            catch (global::System.Exception exception) when ((exception as System.Management.Automation.PipelineStoppedException)== null || (exception as System.Management.Automation.PipelineStoppedException).InnerException != null)
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Runtime.Events.CmdletException, $"{exception.GetType().Name} - {exception.Message} : {exception.StackTrace}").Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                // Write exception out to error channel.
                WriteError( new global::System.Management.Automation.ErrorRecord(exception,string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null) );
            }
            finally
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Runtime.Events.CmdletProcessRecordEnd).Wait();
            }
        }

        /// <summary>Performs execution of the command, working asynchronously if required.</summary>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        protected async global::System.Threading.Tasks.Task ProcessRecordAsync()
        {
            using( NoSynchronizationContext )
            {
                await ((Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Runtime.Events.CmdletProcessRecordAsyncStart); if( ((Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                await ((Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Runtime.Events.CmdletGetPipeline); if( ((Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                Pipeline = Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Module.Instance.CreatePipeline(InvocationInformation, __correlationId, __processRecordId, this.ParameterSetName);
                if (null != HttpPipelinePrepend)
                {
                    Pipeline.Prepend((this.CommandRuntime as Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Runtime.PowerShell.IAsyncCommandRuntimeExtensions)?.Wrap(HttpPipelinePrepend) ?? HttpPipelinePrepend);
                }
                if (null != HttpPipelineAppend)
                {
                    Pipeline.Append((this.CommandRuntime as Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Runtime.PowerShell.IAsyncCommandRuntimeExtensions)?.Wrap(HttpPipelineAppend) ?? HttpPipelineAppend);
                }
                // get the client instance
                try
                {
                    await ((Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Runtime.Events.CmdletBeforeAPICall); if( ((Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                    if (InputObject?.Id != null)
                    {
                        await this.Client.AlertsCloseViaIdentity(InputObject.Id, User, AlertBody, onOk, this, Pipeline);
                    }
                    else
                    {
                        // try to call with PATH parameters from Input Object
                        if (null == InputObject.SubscriptionId)
                        {
                            ThrowTerminatingError( new global::System.Management.Automation.ErrorRecord(new global::System.Exception("InputObject has null value for InputObject.SubscriptionId"),string.Empty, global::System.Management.Automation.ErrorCategory.InvalidArgument, InputObject) );
                        }
                        if (null == InputObject.ResourceGroupName)
                        {
                            ThrowTerminatingError( new global::System.Management.Automation.ErrorRecord(new global::System.Exception("InputObject has null value for InputObject.ResourceGroupName"),string.Empty, global::System.Management.Automation.ErrorCategory.InvalidArgument, InputObject) );
                        }
                        if (null == InputObject.Location)
                        {
                            ThrowTerminatingError( new global::System.Management.Automation.ErrorRecord(new global::System.Exception("InputObject has null value for InputObject.Location"),string.Empty, global::System.Management.Automation.ErrorCategory.InvalidArgument, InputObject) );
                        }
                        if (null == InputObject.AlertName)
                        {
                            ThrowTerminatingError( new global::System.Management.Automation.ErrorRecord(new global::System.Exception("InputObject has null value for InputObject.AlertName"),string.Empty, global::System.Management.Automation.ErrorCategory.InvalidArgument, InputObject) );
                        }
                        await this.Client.AlertsClose(InputObject.SubscriptionId ?? null, InputObject.ResourceGroupName ?? null, InputObject.Location ?? null, InputObject.AlertName ?? null, User, AlertBody, onOk, this, Pipeline);
                    }
                    await ((Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Runtime.Events.CmdletAfterAPICall); if( ((Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                }
                catch (Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Runtime.UndeclaredResponseException urexception)
                {
                    WriteError(new global::System.Management.Automation.ErrorRecord(urexception, urexception.StatusCode.ToString(), global::System.Management.Automation.ErrorCategory.InvalidOperation, new {  User=User,body=AlertBody})
                    {
                      ErrorDetails = new global::System.Management.Automation.ErrorDetails(urexception.Message) { RecommendedAction = urexception.Action }
                    });
                }
                finally
                {
                    await ((Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Runtime.Events.CmdletProcessRecordAsyncEnd);
                }
            }
        }

        /// <summary>Interrupts currently running code within the command.</summary>
        protected override void StopProcessing()
        {
            ((Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Runtime.IEventListener)this).Cancel();
            base.StopProcessing();
        }

        /// <summary>a delegate that is called when the remote service returns 200 (OK).</summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Models.Api20160501.IAlert"
        /// /> from the remote call</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        private async global::System.Threading.Tasks.Task onOk(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Models.Api20160501.IAlert> response)
        {
            using( NoSynchronizationContext )
            {
                var _returnNow = global::System.Threading.Tasks.Task<bool>.FromResult(false);
                overrideOnOk(responseMessage, response, ref _returnNow);
                // if overrideOnOk has returned true, then return right away.
                if ((null != _returnNow && await _returnNow))
                {
                    return ;
                }
                // onOk - response for 200 / application/json
                // (await response) // should be Microsoft.Azure.PowerShell.Cmdlets.InfrastructureInsightsAdmin.Models.Api20160501.IAlert
                WriteObject((await response));
            }
        }
    }
}